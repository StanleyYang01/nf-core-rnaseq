google {
    lifeSciences.bootDiskSize = 1000.GB
    lifeSciences.preemptible = true
    zone = 'us-east1-b'
    network = 'jax-poc-lifebit-01-vpc-network'
    subnetwork = 'us-east1-sub2'
}

docker.enabled = true

executor {
    name = 'google-lifesciences'
}

params {
    // Max resources
    max_memory     = 220.GB
    max_cpus       = 32
    gtf            = 'gs://cloudosinputdata-jax-lifebit-edu-01/nf-core-rnaseq/gencode.v33.primary_assembly.annotation.gtf'
    gencode        = true
    skip_rsem      = true
}

process {
    disk = "200 GB"
    maxRetries = 20
    errorStrategy = { task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [3,14,143,137,104,134,139] ? 'retry' : 'ignore' }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
